def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    ndkVersion "21.3.6528147"
    lintOptions {
        abortOnError false
    }

    compileSdkVersion 28

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.brstory"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        manifestPlaceholders = [UMENG_CHANNEL_VALUE: "umeng", TD_CHANNEL_ID: "android"]

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath true
            }
        }

        ndk {
            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a'
        }
        packagingOptions {
            exclude "lib/arm64-v8a/librealm-jni.so"
        }
    }

    signingConfigs {
        release {
            storeFile file('brstory.jks')
            storePassword "zaq123456"
            keyAlias "brstory"
            keyPassword "zaq123456"
        }
    }
    buildTypes {
        release {
            minifyEnabled true

            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false

            signingConfig signingConfigs.release
        }

        sourceSets.main {
            jniLibs.srcDir 'libs'

            res.srcDirs = ['src/main/res',


            ]


        }
    }

    repositories {
        flatDir {
            dirs 'libs' // this way we can find the .aar file in libs folder 到libs文件夹下寻找.aar包
        }
    }
    sourceSets.main {
        jni.srcDirs = []
        jniLibs.srcDir 'libs'
    }

    dexOptions {
        preDexLibraries = false
        javaMaxHeapSize "4g"   // 调大 HeapSize
    }

    flavorDimensions "mark" //相当于一个标记
    productFlavors {
        yingyongbao { dimension "mark" }
        huawei { dimension "mark" }
        xiaomi { dimension "mark" }
        vivo { dimension "mark" }
        oppo { dimension "mark" }
        bbg { dimension "mark" }
        baidu { dimension "mark" }
        flutter { dimension "mark" }

    }
    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name, TD_CHANNEL_ID: name,JPUSH_PKGNAME : "com.brstory"]

    }
    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "brstory_v${defaultConfig.versionName}_${variant.productFlavors[0].name}.apk"
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // 下面各SDK根据宿主App是否使用相关业务按需引入。
    // OAID目前为目前国内市场主流的Android Q设备标识，可根据需要选择。
    // 友盟统计SDK
    implementation  'com.umeng.umsdk:common:9.1.0' // (必选)

    implementation  'com.umeng.umsdk:asms:1.1.3' // asms包依赖(必选)
    implementation  'com.umeng.umsdk:crash:0.0.4' // native crash包依赖(必选)

}
